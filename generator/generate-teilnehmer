#!/usr/bin/python3

import sys, os, io, random, subprocess
import base64, qrcode, qrcode.image.svg, cairosvg

def escape(s):
    if '"' in s:
        return '"%s"' % s.replace('"', '""')
    if " " in s:
        s = '"%s"' % s
    return s

def printline(first, last, token, email="", file=sys.stdout):
    print(escape(first), escape(last), escape(token), escape(email), sep=",", file=file)

def printtex(first, last, token, file=sys.stdout):
    url = baseurl % token
    print("\participant{%s}{%s}{%s}{%s}" % (first, last, token, url), file=file)
    
def gen_token():
    while True:
        r = random.getrandbits(64).to_bytes(8, byteorder='little')
        token = base64.b32encode(r).decode().strip("=").lower()
        if token in used:
            print("random-collision")
            continue
        return token

def usage(file=sys.stdout):
    print("usage: %s offset number-of-participants baseurl\n"
          "       where baseurl contains a '%%s' for the token\n"
          "       p.e. https://fragebogen.fossgis.konferenz.de/index.php/survey/index/sid/NUMBER/token/%%s" %
          os.path.basename(sys.argv[0]) , file=file)

###########################################################################
#
# main
#
###########################################################################

if len(sys.argv) == 2 and sys.argv[1] == "--help":
    usage()
    exit(0)
    
if len(sys.argv) != 4:
    usage(sys.stderr)
    exit(1)

offset = int(sys.argv[1])
numparts = int(sys.argv[2])
baseurl = str(sys.argv[3])
print("generating %d participants starting at %d with\nbaseurl: ‘%s’" % (numparts, offset, baseurl))

csv = open("teilnehmer.csv", "w")
tex = open("teilnehmer.tex", "w")
printline("firstname", "lastname", "token", email="email", file=csv)
used = []
for i in range(numparts):
    number = i+offset
    token = gen_token()
    url = baseurl % token
    svg_file = "images/%s.svg" % token
    
    qr_svg = qrcode.make(url, image_factory=qrcode.image.svg.SvgPathImage)
    qr_svg_bytes = io.BytesIO()
    qr_svg.save(qr_svg_bytes)
    cairosvg.svg2pdf(qr_svg_bytes.getvalue(), write_to="images/%s.pdf" % token)
    qr_svg_bytes.close()
    used.append(token)
    printline("Teilnehmer", "%04d" % number, token, file=csv)
    printtex("Teilnehmer", "%04d" % number, token, file=tex)
tex.close()
csv.close()


    # for i in *.svg; do echo --export-pdf=${i%.svg}.pdf $i; done | inkscape --shell
    #


    #subprocess.run(["inkscape", "--without-gui",
    #                "--export-pdf=images/%s.pdf" % token, svg_file])
    #os.remove(svg_file)
    # import io
    # qr_svg_bytes = io.BytesIO()
    # qr_svg.save(qr_svg_bytes)
    # cairosvg.svg2pdf(qr_svg_str.getvalue(), write_to="X.pdf")
    # qr_svg_bytes.close()
